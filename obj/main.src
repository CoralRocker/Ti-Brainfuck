; Zilog eZ80 ANSI C Compiler Release 3.4
; -optsize -noreduceopt -nomodsect -peephole -globalopt
; -localcse -const=ROM 
	FILE	"SRC\MAIN.C"
	.assume ADL=1
	SEGMENT CODE
;    1	#include <string.h>
;    2	#include <stdlib.h>
;    3	#include <stdint.h>
;    4	#include <tice.h>
;    5	#include <fileioc.h>
;    6	
;    7	int main(int argc, char **argv)
;    8	{
_main:
	LD	HL,-18
	CALL	__frameset
;    9		
;   10		uint16_t PTRSIZE;
;   11		short LOOPSIZE;
;   12		char *fname;
;   13		char c;
;   14	
;   15		/* Pointer */
;   16		//uint16_t array[PTRSIZE];
;   17		uint16_t *p;
;   18		uint16_t ptrNum;
;   19		uint16_t *tempPtr;
;   20	
;   21		//uint16_t loop[4096] = {0};
;   22		uint16_t *l;
;   23		uint16_t *tempLoop;
;   24		uint16_t *ol;
;   25	
;   26		/* FILE IO */
;   27		ti_var_t f;
;   28	
;   29		/* TI Setup */
;   30		os_ClrHome();
	LD	BC,_asm_ClrLCD
	PUSH	BC
	CALL	__OS
	POP	BC
	LD	BC,_asm_HomeUp
	PUSH	BC
	CALL	__OS
	POP	BC
	LD	BC,_asm_DrawStatusBar
	PUSH	BC
	CALL	__OS
	POP	BC
;   31		ti_CloseAll();
	CALL	_ti_CloseAll
;   32	
;   33		/* Variable Instantiations */
;   34		fname = "OP";
	LD	BC,L__0
	LD	(IX+-15),BC
;   35		
;   36		PTRSIZE = 256;
;   37		LOOPSIZE = 32;
;   38	
;   39		p = malloc(sizeof(uint16_t)*PTRSIZE);
	LD	BC,512
	PUSH	BC
	CALL	_malloc
	POP	BC
	LD	(IX+-3),HL
;   40		ptrNum = 0;
	LD	(IX+-8),0
	LD	(IX+-7),0
;   41		tempPtr = p;
;   42		memset(p, 0x00, PTRSIZE);
	LD	BC,256
	PUSH	BC
	LD	BC,0
	PUSH	BC
	LD	BC,(IX+-3)
	PUSH	BC
	CALL	_memset
	POP	BC
	POP	BC
	POP	BC
;   43	
;   44		l = malloc(sizeof(uint16_t)*LOOPSIZE);
	LD	BC,64
	PUSH	BC
	CALL	_malloc
	POP	BC
	LD	(IX+-6),HL
;   45		tempLoop = l;
;   46		
;   47		f = ti_OpenVar(fname, "r", 5);
	LD	BC,5
	PUSH	BC
	LD	BC,L__1
	PUSH	BC
	LD	BC,(IX+-15)
	PUSH	BC
	CALL	_ti_OpenVar
	POP	BC
	POP	BC
	POP	BC
	LD	(IX+-9),A
;   48		
;   49		if(!f){
	OR	A,A
	JR	NZ,L_28
;   50			os_PutStrFull("Program \"OP\" Not Found");
	LD	BC,L__3
	PUSH	BC
	CALL	_os_PutStrFull
	POP	BC
;   51			while(!os_GetCSC());
L_4:
	CALL	_os_GetCSC
	OR	A,A
	JR	Z,L_4
;   52			return 1;
	LD	HL,1
	JR	L_34
;   53		}
;   54		
;   55		/* Compile Loop */
;   56		while((c = ti_GetC(f)) != EOF)
L_29:
;   57		{
;   58			switch(c)
	LD	A,(IX+-10)
	SEXT	HL
	LD	L,(IX+-10)
	CALL	__case8
L__5:
	DW	8
	DB	6
	DW24	L_23	

	DB	7
	DW24	L_24	

	DB	16
	DW24	L_10	

	DB	17
	DW24	L_7	

	DB	43
	DW24	L_22	

	DB	58
	DW24	L_18	

	DB	112
	DW24	L_13	

	DB	113
	DW24	L_14	

	DW24	L_28	

;   59			{
;   60				case 17:
L_7:
;   61					if(ptrNum + 1 < PTRSIZE)
	LD	BC,(IX+-8)
	CALL	__stoiu
	INC	HL
	OR	A,A
	LD	BC,256
	SBC	HL,BC
	JP	P,L_28
;   62					{
;   63						++p;
	LD	IY,(IX+-3)
	LEA	IY,IY+2
	LD	(IX+-3),IY
;   64						++ptrNum;
	LD	HL,(IX+-8)
	INC	HL
	LD	(IX+-8),L
	LD	(IX+-7),H
;   65					}
;   66					break;
	JR	L_28
;   67				case 16:
L_10:
;   68					if(ptrNum != 0)
	LD	HL,(IX+-8)
	CALL	__scmpzero
	JR	Z,L_28
;   69					{
;   70						--p;
	LD	IY,(IX+-3)
	LEA	BC,IY+-2
	LD	(IX+-3),BC
;   71						--ptrNum;
	LD	IY,(IX+-8)
	LEA	HL,IY+-1
	LD	(IX+-8),L
	LD	(IX+-7),H
;   72					}
;   73					break;
	JR	L_28
;   74				case 112:
L_13:
;   75					++*p;
	LD	HL,(IX+-3)
	LD	BC,(HL)
	INC	BC
	LD	HL,(IX+-3)
	LD	(HL),C
	INC	HL
	LD	(HL),B
;   76					break;
	JR	L_28
;   77				case 113:
L_14:
;   78					if(*p <= 0)
	LD	HL,(IX+-3)
	LD	BC,(HL)
	CALL	__stoiu
	LD	BC,HL
	OR	A,A
	SBC	HL,HL
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_16
;   79						*p = 0;
	LD	HL,(IX+-3)
	LD	(HL),0
	INC	HL
	LD	(HL),0
;   80					else
	JR	L_28
L_16:
;   81						--*p;
	LD	HL,(IX+-3)
	LD	IY,(HL)
	LEA	BC,IY+-1
	LD	HL,(IX+-3)
	LD	(HL),C
	INC	HL
	LD	(HL),B
;   82					break;
	JR	L_28
;   83				case 58:
L_18:
;   84					{
;   85					char op[2];
;   86					op[1] = 0x00;
	LEA	HL,IX+-12
	INC	HL
	LD	(HL),0
;   87					op[0] = *p;
	LD	HL,(IX+-3)
	LD	A,(HL)
	LD	(IX+-12),A
;   88					if(*p != 10)
	LD	HL,(IX+-3)
	LD	BC,(HL)
	CALL	__stoiu
	OR	A,A
	LD	BC,10
	SBC	HL,BC
	JR	Z,L_20
;   89						os_PutStrFull(op);
	PEA	IX+-12
	CALL	_os_PutStrFull
	POP	BC
;   90					else
	JR	L_28
L_20:
;   91						boot_NewLine();
	CALL	_boot_NewLine
;   92					break;
	JR	L_28
;   93					 }
;   94				case 43:
L_22:
;   95					*p = os_GetCSC();
	CALL	_os_GetCSC
	LD	C,A
	LD	HL,(IX+-3)
	LD	(HL),C
	INC	HL
	LD	(HL),0
;   96					break;
	JR	L_28
;   97				case 6:
L_23:
;   98					++l;
	LD	IY,(IX+-6)
	LEA	IY,IY+2
	LD	(IX+-6),IY
;   99					*l = ti_Tell(f);
	LD	C,(IX+-9)
	LD	B,0
	PUSH	BC
	CALL	_ti_Tell
	POP	BC
	LD	BC,HL
	LD	HL,(IX+-6)
	LD	(HL),C
	INC	HL
	LD	(HL),B
;  100					
;  101					break;
	JR	L_28
;  102				case 7:
L_24:
;  103					if(*p == 0)
	LD	HL,(IX+-3)
	LD	HL,(HL)
	CALL	__scmpzero
	JR	NZ,L_26
;  104					{	
;  105						*l = 0;
	LD	HL,(IX+-6)
	LD	(HL),0
	INC	HL
	LD	(HL),0
;  106						--l;
	LD	IY,(IX+-6)
	LEA	IY,IY+-2
	LD	(IX+-6),IY
;  107					}else{
	JR	L_28
L_26:
;  108						ti_Seek(*l, SEEK_SET, f);
	LD	C,(IX+-9)
	LD	DE,0
	LD	B,0
	PUSH	BC
	PUSH	DE
	LD	HL,(IX+-6)
	LD	BC,(HL)
	CALL	__stoiu
	PUSH	HL
	CALL	_ti_Seek
	POP	BC
	POP	BC
	POP	BC
;  109					}
;  110					break;
;  111			}
;  112			
;  113		}
L_28:
	LD	C,(IX+-9)
	LD	B,0
	PUSH	BC
	CALL	_ti_GetC
	POP	BC
	LD	(IX+-10),L
	LD	A,(IX+-10)
	CP	A,-1
	JR	NZ,L_29
;  114		/* Close Files */
;  115		ti_Close(f);
	LD	C,(IX+-9)
	LD	B,0
	PUSH	BC
	CALL	_ti_Close
	POP	BC
;  116		free(l);
	LD	BC,(IX+-6)
	PUSH	BC
	LD	(IX+-18),HL
	CALL	_free
	LD	HL,(IX+-18)
	POP	BC
;  117		free(p);
	LD	BC,(IX+-3)
	PUSH	BC
	LD	(IX+-18),HL
	CALL	_free
	LD	HL,(IX+-18)
	POP	BC
;  118		
;  119		while(!os_GetCSC());
L_33:
	LD	(IX+-18),HL
	CALL	_os_GetCSC
	LD	HL,(IX+-18)
	OR	A,A
	JR	Z,L_33
;  120	
;  121	
;  122	}	
L_34:
	LD	SP,IX
	POP	IX
	RET	


;**************************** _main ***************************
;Name                         Addr/Register   Size   Type
;_free                               IMPORT  -----   function
;_ti_Close                           IMPORT  -----   function
;_ti_GetC                            IMPORT  -----   function
;_ti_Seek                            IMPORT  -----   function
;_ti_Tell                            IMPORT  -----   function
;_boot_NewLine                       IMPORT  -----   function
;_os_GetCSC                          IMPORT  -----   function
;_os_PutStrFull                      IMPORT  -----   function
;_ti_OpenVar                         IMPORT  -----   function
;_memset                             IMPORT  -----   function
;_malloc                             IMPORT  -----   function
;_ti_CloseAll                        IMPORT  -----   function
;_asm_DrawStatusBar                  IMPORT  -----   function
;_asm_HomeUp                         IMPORT  -----   function
;_asm_ClrLCD                         IMPORT  -----   function
;__OS                                IMPORT  -----   function
;fname                                IX-15      3   variable
;op                                   IX-12      2   variable
;c                                    IX-10      1   variable
;f                                     IX-9      1   variable
;ptrNum                                IX-8      2   variable
;l                                     IX-6      3   variable
;p                                     IX-3      3   variable
;argv                                  IX+9      3   parameter
;argc                                  IX+6      3   parameter


; Stack Frame Size: 30 (bytes)
;       Spill Code: 0 (instruction)


	SEGMENT STRSECT
L__0:
	DB	"OP"
	DB	0
L__1:
	DB	"r"
	DB	0
L__3:
	DB	"Program \"OP\" Not Found"
	DB	0
	XREF _ti_Tell:ROM
	XREF _ti_Seek:ROM
	XREF _ti_GetC:ROM
	XREF _ti_Close:ROM
	XREF _ti_OpenVar:ROM
	XREF _ti_CloseAll:ROM
	XREF _asm_DrawStatusBar:ROM
	XREF _asm_ClrLCD:ROM
	XREF _asm_HomeUp:ROM
	XREF __OS:ROM
	XREF _os_GetCSC:ROM
	XREF _os_PutStrFull:ROM
	XREF _boot_NewLine:ROM
	XREF _free:ROM
	XREF _malloc:ROM
	XREF _memset:ROM
	XREF __stoiu:ROM
	XREF __frameset:ROM
	XREF __setflag:ROM
	XREF __scmpzero:ROM
	XREF __case8:ROM
	XDEF _main
	END
